<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd 
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/tx 
  	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Add support for component scanning -->
	<context:component-scan base-package="com.ysrsdn.myblog" />

	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven />

	<!-- Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value="" />
	</bean>


	<!-- Used to locate static files (css) -->
	<mvc:resources mapping="/resources/**" location="/resources/" />



	<!-- Configuring database data source -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>
	
<!-- Before Switching to a DataSource Pool -->
	
	<!-- Using MySQL as Database -->
<!-- 	<bean id="dataSource" -->
<!-- 		class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="com.mysql.jdbc.Driver" /> -->
<!-- 		<property name="url" -->
<!-- 			value="${dataSource.url}" /> -->
<!-- 		<property name="username" value="${dataSource.username}" /> -->
<!-- 		<property name="password" value="${dataSource.password}" /> -->
<!-- 	</bean> -->
	
	<!-- Using PostgreSQL as Database (Locally) -->
<!-- 	<bean id="dataSource" -->
<!-- 		class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="org.postgresql.Driver" /> -->
<!-- 		<property name="url" -->
<!-- 			value="${dataSource.url}" /> -->
<!-- 		<property name="username" value="${dataSource.username}" /> -->
<!-- 		<property name="password" value="${dataSource.password}" /> -->
<!-- 	</bean> -->
	
	<!-- Using Heroku PostgreSQL -->
	<bean class="java.net.URI" id="dbUrl">
    	<constructor-arg value="#{systemEnvironment['DATABASE_URL']}"/>
	</bean>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver" />
	    <property name="url" value="#{ 'jdbc:postgresql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() + '?sslmode=require' }"/>
	    <property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }"/>
	    <property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }"/>
	</bean>
	
	

<!-- Testing DataSource Pool with Hikari -->
<!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 		<property name="locations"> -->
<!-- 			<list> -->
<!-- 				<value>classpath:hibernate.properties</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> -->
<!-- 		<property name="poolName" value="springHikariCP" /> -->
<!-- 		<property name="connectionTestQuery" value="SELECT 1" /> -->
<!-- 		<property name="dataSourceClassName" value="${hibernate.dataSourceClassName}" /> -->
<!-- 		<property name="maximumPoolSize" value="${hibernate.hikari.maximumPoolSize}" /> -->
<!-- 		<property name="idleTimeout" value="${hibernate.hikari.idleTimeout}" /> -->

<!-- 		<property name="dataSourceProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="url">${dataSource.url}</prop> -->
<!-- 				<prop key="user">${dataSource.username}</prop> -->
<!-- 				<prop key="password">${dataSource.password}</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
<!-- 	</bean> -->

 		<!-- HikariCP configuration --> 
<!-- 	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" -->
<!-- 		destroy-method="close"> -->
<!-- 		<constructor-arg ref="hikariConfig" /> -->
<!-- 	</bean> -->
<!-- End - Testing DataSource Pool with Hikari -->


	<!-- Setting up Hibernate session factory : the session factory depends 
		on the data source -->
	<bean id="mySessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.ysrsdn.myblog.entity" /> 	<!-- packages to scan for Hibernate @Entity classes -->

		<!-- Specifying additional properties -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- Setting up Hibernate transaction manager -->
	<bean id="myTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="mySessionFactory" />
	</bean>

	<!-- Enabling configuration of transaction annotations -->
	<tx:annotation-driven transaction-manager="myTransactionManager" />





	<!-- For Spring Security -->
	<!-- Configuring Authentication Provider -->
	<security:authentication-manager>
	<security:authentication-provider>
		<security:password-encoder hash="bcrypt" />
		 <security:jdbc-user-service data-source-ref="dataSource"
		 users-by-username-query="SELECT username, password, enabled FROM users WHERE username=?" 
		 authorities-by-username-query="SELECT username, authority FROM authorities WHERE username=?" /> 
	</security:authentication-provider>
	</security:authentication-manager>





</beans>